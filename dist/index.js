#!/usr/bin/env node
import chalk from 'chalk';
import path from 'path';
import getName from './utils/getName';
import askForArgs from './utils/ask';
import useParams from './utils/handleParams';
import { cwd, infoMsg, willTranspile } from './utils';
import { installDeps } from './utils/npm';
import Scripts from './utils/scripts';
import readme from './utils/readme';
import { parsed } from './utils/yargs';
main();
async function main() {
    // Initialize ---
    const name = await getName(parsed?.name);
    let params;
    if (parsed && 'runtime' in parsed) {
        infoMsg(`Using default arguments for a ${parsed.runtime} runtime:`);
        console.log(parsed);
        params = parsed;
    }
    else {
        params = { name, ...(await askForArgs()) };
    }
    const start = new Date().getTime();
    const gitignore = ['dist/', 'node_modules/'];
    const dir = path.join(cwd, name);
    const { packageJson, scripts, files } = useParams(params, name);
    // ---
    // Write files ---
    infoMsg('Creating files...');
    files.add({
        name: willTranspile(params.runtime) ? 'index.ts' : 'src/index.ts',
        contents: params.css && params.buildTool == 'esbuild'
            ? `import './style.scss'\n`
            : ''
    });
    files.add({ name: 'package.json', contents: packageJson.toString() });
    files.add({ name: 'README.md', contents: readme(packageJson.data, params) });
    files.add({ name: '.gitignore', contents: gitignore.join('\n') });
    await files.write(dir);
    // ---
    // Install deps ---
    infoMsg(`Installing dependencies with ${params.packageManager}...`);
    await new Scripts(process)
        .addMany(installDeps(params.packageManager, packageJson))
        .exec(dir);
    // ---
    // Post install ---
    infoMsg('Running post install scripts...');
    await scripts.exec(dir);
    // ---
    // Finish message ---
    infoMsg('Done. Created ' +
        chalk.blue(chalk.bold(name)) +
        ' at ' +
        chalk.blue(dir) +
        ` in ${new Date().getTime() - start}ms`);
    // ---
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQTtBQUN6QixPQUFPLElBQUksTUFBTSxNQUFNLENBQUE7QUFDdkIsT0FBTyxPQUFPLE1BQU0saUJBQWlCLENBQUE7QUFDckMsT0FBTyxVQUFVLE1BQU0sYUFBYSxDQUFBO0FBQ3BDLE9BQU8sU0FBUyxNQUFNLHNCQUFzQixDQUFBO0FBQzVDLE9BQU8sRUFBVSxHQUFHLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFNBQVMsQ0FBQTtBQUM3RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sYUFBYSxDQUFBO0FBQ3pDLE9BQU8sT0FBTyxNQUFNLGlCQUFpQixDQUFBO0FBQ3JDLE9BQU8sTUFBTSxNQUFNLGdCQUFnQixDQUFBO0FBQ25DLE9BQU8sRUFBZ0IsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFBO0FBRXBELElBQUksRUFBRSxDQUFBO0FBRU4sS0FBSyxVQUFVLElBQUk7SUFDakIsaUJBQWlCO0lBQ2pCLE1BQU0sSUFBSSxHQUFHLE1BQU0sT0FBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUN4QyxJQUFJLE1BQWMsQ0FBQTtJQUVsQixJQUFJLE1BQU0sSUFBSSxTQUFTLElBQUksTUFBTSxFQUFFO1FBQ2pDLE9BQU8sQ0FBQyxpQ0FBaUMsTUFBTSxDQUFDLE9BQU8sV0FBVyxDQUFDLENBQUE7UUFDbkUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUNuQixNQUFNLEdBQUcsTUFBTSxDQUFBO0tBQ2hCO1NBQU07UUFDTCxNQUFNLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLE1BQU0sVUFBVSxFQUFFLENBQUMsRUFBRSxDQUFBO0tBQzNDO0lBRUQsTUFBTSxLQUFLLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUNsQyxNQUFNLFNBQVMsR0FBRyxDQUFDLE9BQU8sRUFBRSxlQUFlLENBQUMsQ0FBQTtJQUM1QyxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUNoQyxNQUFNLEVBQUUsV0FBVyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFBO0lBQy9ELE1BQU07SUFFTixrQkFBa0I7SUFDbEIsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUE7SUFDNUIsS0FBSyxDQUFDLEdBQUcsQ0FBQztRQUNSLElBQUksRUFBRSxhQUFhLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLGNBQWM7UUFDakUsUUFBUSxFQUNOLE1BQU0sQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLFNBQVMsSUFBSSxTQUFTO1lBQ3pDLENBQUMsQ0FBQyx5QkFBeUI7WUFDM0IsQ0FBQyxDQUFDLEVBQUU7S0FDVCxDQUFDLENBQUE7SUFDRixLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsV0FBVyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUNyRSxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQzVFLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUNqRSxNQUFNLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDdEIsTUFBTTtJQUVOLG1CQUFtQjtJQUNuQixPQUFPLENBQUMsZ0NBQWdDLE1BQU0sQ0FBQyxjQUFjLEtBQUssQ0FBQyxDQUFBO0lBQ25FLE1BQU0sSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDO1NBQ3ZCLE9BQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxXQUFXLENBQUMsQ0FBQztTQUN4RCxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDWixNQUFNO0lBRU4sbUJBQW1CO0lBQ25CLE9BQU8sQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFBO0lBQzFDLE1BQU0sT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUN2QixNQUFNO0lBRU4scUJBQXFCO0lBQ3JCLE9BQU8sQ0FDTCxnQkFBZ0I7UUFDZCxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUIsTUFBTTtRQUNOLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBQ2YsT0FBTyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLEtBQUssSUFBSSxDQUMxQyxDQUFBO0lBQ0QsTUFBTTtBQUNSLENBQUMifQ==